kind: workload
name: {{ .Release.Name }}
description: {{ .Release.Name }} cassandra
tags: {}
spec:
  type: stateful
  containers:
    - name: cassandra
      cpu: "{{ .Values.resources.cpu }}"
      image: cassandra:4.1
      inheritEnv: false
      memory: {{ .Values.resources.memory }}
      command: "/bin/bash"
      args:
        - "/scripts/cassandra-startup.sh"
      ports:
        - number: 7000
          protocol: tcp
        - number: 9042
          protocol: tcp
        - number: 7199
          protocol: tcp
      volumes:
        - path: /var/lib/cassandra/data
          recoveryPolicy: retain
          uri: cpln://volumeset/{{ .Release.Name }}-cassandra-vs
        - path: /scripts/cassandra-startup.sh
          uri: cpln://secret/{{ .Release.Name }}-cassandra-startup.payload
  identityLink: //gvc/{{ .Values.gvc.name }}/identity/{{ .Release.Name }}-cassandra-identity
  defaultOptions:
    multiZone:
      enabled: {{ .Values.multiZone.enabled }}
    autoscaling:
      maxConcurrency: 0
      maxScale: {{ (index .Values.gvc.locations 0).replicas | int }}
      metric: cpu
      minScale: 1
      scaleToZeroDelay: 300
      target: 100
    capacityAI: false
    debug: false
    suspend: false
    timeoutSeconds: 5
  localOptions:
  {{- range $location := .Values.gvc.locations }}
  - autoscaling:
      maxConcurrency: 0
      maxScale: {{ if eq ($location.replicas | int) 0 }}1{{ else }}{{ $location.replicas | int }}{{ end }}
      metric: disabled
      minScale: {{ if eq ($location.replicas | int) 0 }}0{{ else }}{{ $location.replicas | int }}{{ end }}
      scaleToZeroDelay: 300
      target: 100
    capacityAI: false
    debug: false
    location: //location/{{ $location.name }}
    suspend: {{ if eq ($location.replicas | int) 0 }}true{{ else }}false{{ end }}
    timeoutSeconds: 10
  {{- end }}
  firewallConfig:
    external:
      inboundAllowCIDR: []
      inboundBlockedCIDR: []
      outboundAllowCIDR: []
      outboundAllowHostname: []
      outboundAllowPort: []
      outboundBlockedCIDR: []
    internal:
      inboundAllowType: {{ .Values.internal_access.type }}
      {{- if .Values.internal_access.workloads }}
      inboundAllowWorkload: {{ .Values.internal_access.workloads | toYaml | nindent 8 }}
      {{- end }}
  loadBalancer:
    direct:
      enabled: false
      ports: []
    replicaDirect: true
  supportDynamicTags: false